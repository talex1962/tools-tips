SETTING UP A NEW LITTLE DEVICE
------------------------------

0. Install Xubuntu 14.04 LTS
    - username ld-admin
    - password friday
    - autologin
    - disk partitions:
        - /dev/sda1 - 256MB - /boot - format to ext4
        - /dev/sda2 - 5.0GB - /root - format to ext4
        - /dev/sda3 - 4.0GB - swap
        - /dev/sda4 - ~20GB - not mounted - format to ext4

1. Utilities and Git - install first

    rm -rf Documents/ Downloads/ Music/ Pictures/ Public/ Templates/ Videos/
    sudo apt-get install -y openssh-server xtitle vim exuberant-ctags git tcpdump dkms

2. SSH and keys

    mkdir ~/.ssh
    cd ~/.ssh
    vi authorized_keys
    Add PuTTY public key:

ssh-rsa                                                                                         AAAAB3NzaC1yc2EAAAABJQAAAQEApbgyQtey4UaSh8VibVo6HsL9vSBZfIMFB6l71nCH5D2dfetKa2MqhjygPCVat0V8cAb7LhKpu6Iaaz6E8fzeMGQ9VYQ1kEKzxUtWcAWkqXeXiUstXNG4MxErnONJRfmEdeDbfVWDLuet7zVfq9AWo2bSNR/egeNHzIptueSiYxsEzL576VWEPhFZRCWGQ3/psutKlCds5awfOSV9p+TZPjr8BQerFnPrVDLVEbMDZBJZ480eSNwOI+fZCpMuOhRgj1AVbE9Wdu/e6F8rmJrjkAFSXxvGQ9FHcWUq2CxLEH6JJKZ9qTHxKqPdbHMZbKAiyg6TM5ByGN+zjlFSfA+8SQ== rsa-key-20140207

    (CHECK FOR SPACES!!)

    chmod go-rwx authorized_keys
    cd ..
    chmod go-rwx .ssh

3. Speed up boot time and various other stuff

    sudo vi /etc/init/failsafe.conf
    -- reduce all sleep times
    sudo vi /etc/group
    -- add ld-admin to lots of groups

4. Networking

    sudo apt-get install -y vlan isc-dhcp-server ntp bind9 dnsutils
    sudo modprobe 8021q
    sudo vi /etc/modules
    -- Edit: add the following line at the end
        8021q

    sudo vi /etc/network/interfaces
    Edit:

        #------------------------------------------------------------------------------
        # the loopback interface
        auto lo
        iface lo inet loopback

        #------------------------------------------------------------------------------
        # eth0 is the uplink port to the Internet/rest-of-LAN
        # SET THE ADDRESS APPROPRIATELY
        auto eth0
        iface eth0 inet static
            address 192.168.0.55
            netmask 255.255.255.0
            network 192.168.0.0
            broadcast 192.168.0.255
            gateway 192.168.0.1
            dns-nameservers 65.182.224.40 65.182.224.50

        #------------------------------------------------------------------------------
        # eth1.1 is the Little Devices subnetwork 192.168.1.x on VLAN 1 (default)
        auto eth1.1
        iface eth1.1 inet static
            address 192.168.1.1
            netmask 255.255.255.0
            network 192.168.1.0
            broadcast 192.168.1.255
            dns-nameservers 65.182.224.40 65.182.224.50

        #------------------------------------------------------------------------------
        # eth1.2 is the Little Devices subnetwork 192.168.2.x on VLAN 2 (Test)
        auto eth1.2
        iface eth1.2 inet static
            address 192.168.2.1
            netmask 255.255.255.0
            network 192.168.2.0
            broadcast 192.168.2.255
            dns-nameservers 65.182.224.40 65.182.224.50

        #------------------------------------------------------------------------------
        # eth1.3 is the Little Devices subnetwork 192.168.3.x on VLAN 3 (Guest)
        auto eth1.3
        iface eth1.3 inet static
            address 192.168.3.1
            netmask 255.255.255.0
            network 192.168.3.0
            broadcast 192.168.3.255
            dns-nameservers 65.182.224.40 65.182.224.50

        #------------------------------------------------------------------------------
        # use the router on 192.168.0.1 as the default gateway
        up route add default gw 192.168.0.1

    -- remove NetworkManager
    sudo apt-get purge -y network-manager

5. Set up DHCP and DNS services

    sudo vi /etc/dhcp/dhcpd.conf
        -- modify

        default-lease-time 600;
        max-lease-time 7200;
        authoritative;

        subnet 192.168.1.0 netmask 255.255.255.0 {
            range 192.168.1.100 192.168.1.250;
            option routers 192.168.1.1;
            option domain-name-servers 65.182.224.40, 65.182.224.50, 8.8.8.8;
            option domain-name "ldevs.com";
        }

        subnet 192.168.2.0 netmask 255.255.255.0 {
            range 192.168.2.100 192.168.2.250;
            option routers 192.168.2.1;
            option domain-name-servers 65.182.224.40, 65.182.224.50, 8.8.8.8;
            option domain-name "ldevs.com";
        }

        subnet 192.168.3.0 netmask 255.255.255.0 {
            range 192.168.3.100 192.168.3.250;
            option routers 192.168.3.1;
            option domain-name-servers 65.182.224.40, 65.182.224.50, 8.8.8.8;
            option domain-name "ldevs.com";
        }

    sudo vi /etc/default/isc-dhcp-server
        -- modify

        INTERFACES="eth1.1 eth1.2 eth1.3"

    sudo service isc-dhcp-server restart

    sudo vi /etc/bind/named.conf.options
        -- modify:

        forwarders {
            65.182.224.40;
            65.182.224.50;
            8.8.8.8;
                    };

    sudo service bind9 restart

6. Set up routing

    sudo vi /etc/sysctl.conf
        -- modify:

        net.ipv4.ip_forward=1

    sudo sh -c "echo 1 >> /proc/sys/net/ipv4/ip_forward"
    sudo service procps start
        (returns "procps stop/waiting")
    sudo sysctl -p

    Now reboot to set the network configs into action.

    NOTE! NOTE! pinging an external host will not work unless NAT is running!

7. Set up iptables for NAT

    BASIC SETUP (clean up later for firewalls) to let internal stuff out:

    sudo vi /etc/rc.local
        -- add following lines before the 'exit 0':
        # set up BASIC iptables configuration to NAT out to eth0
        /sbin/iptables-restore /etc/network/iptables.dat
        /usr/bin/logger -t IPTABLES iptables restored

    sudo vi /etc/network/iptables.dat
        -- modify:
        *filter
        -A FORWARD -i eth0 -o eth1.1 -m state --state RELATED,ESTABLISHED -j ACCEPT
        -A FORWARD -i eth0 -o eth1.2 -m state --state RELATED,ESTABLISHED -j ACCEPT
        -A FORWARD -i eth0 -o eth1.3 -m state --state RELATED,ESTABLISHED -j ACCEPT
        -A FORWARD -i eth1.1 -o eth0 -j ACCEPT
        -A FORWARD -i eth1.2 -o eth0 -j ACCEPT
        -A FORWARD -i eth1.3 -o eth0 -j ACCEPT
        COMMIT
        *nat
        -A POSTROUTING -o eth0 -j MASQUERADE
        COMMIT

8. File system and service

    sudo apt-get install -y lvm2 liblvm2-dev samba cryptsetup-bin cryptsetup

    ----- Do following if /dev/sda4 formatted to ext4 and mounted on /srv ----
    sudo umount /dev/sda4
    --------------------------------------------------

    =================================================================================
    === INITIAL BASIC SAMBA FILESERVER TEST
    =================================================================================
    sudo fdisk /dev/sda
    p (and verify that /dev/sda4 is partition number 4)
    t
    4
    8e
    p
    w

    sudo pvcreate /dev/sda4
    sudo vgcreate storage /dev/sda4
    sudo vgdisplay
    sudo lvcreate -L 5G -n testshare storage
    sudo lvdisplay
    sudo mkfs.ext4 /dev/mapper/storage-testshare
    sudo mkdir -p /srv/storage/testshare
    sudo chmod a+rwx /srv/storage
    sudo mount /dev/mapper/storage-testshare /srv/storage/testshare
    sudo chmod a+rwx /srv/storage/testshare
    sudo vi /etc/fstab
    -- modify:
        -- comment out line for /dev/sda4
        -- add:
            /dev/mapper/storage-testshare /srv/storage/testshare ext4 defaults,nobootwait 0 2

    Set up Samba:

        -- add a guest user named storage for anonymous accesses
        sudo addgroup --system storage
        NOTE: record the GID, normally 128
        sudo adduser --system --gid 128 --no-create-home storage

        sudo vi /etc/samba/smb.conf
        -- modify
            #workgroup = LITTLEDEVICES
            workgroup = VERIWAVE
            #wins support = yes
            #dns proxy = yes
            interfaces = 127.0.0.0/8 192.168.1.0/24 192.168.2.0/24 192.168.3.0/24 eth1.1 eth1.2 eth1.3
            bind interfaces only = yes
            ...
            security = user
            guest account = storage
            map to guest = bad user

            [testshare]
                comment = LittleDevices Test Share
                path = /srv/storage/testshare
                browsable = yes
                guest ok = yes
                read only = no
                writable = yes
                create mask = 0777
                directory mask = 0777
        NOTE: comment out all the printer stuff

        -- make testshare accessible
        sudo chmod a+rwx /srv/storage
        sudo chmod a+rwx /srv/testshare

        sudo restart smbd
        sudo restart nmbd

    Verify that Samba is active and works, and exporting a 5G filesystem
    under testshare. Reboot and verify that it continues to work.

    =================================================================================
    === ENCRYPTED LVM FILESERVER TEST AND PRE-CONFIG FOR STORAGE MANAGER
    =================================================================================
    ---- Do following if the test was done above: ----
    sudo service smbd stop
    sudo service nmbd stop
    sudo umount /srv/storage/testshare
    sudo lvremove storage/testshare
    sudo vgremove storage
    sudo pvremove /dev/sda4
    --------------------------------------------------

    -- setup dm-crypt with a keyfile for automatic boot, and encrypt /dev/sda4
    sudo dd if=/dev/urandom of=/root/storage_keyfile bs=1024 count=4
    sudo chmod 0400 /root/storage_keyfile
    sudo chown root:root /root/storage_keyfile
    sudo cryptsetup --key-file /root/storage_keyfile --cipher=aes-cbc-plain --key-size=128 luksFormat /dev/sda4
    sudo vi /etc/crypttab
    -- modify:
        sda4_crypt /dev/sda4 /root/storage_keyfile luks,loud,timeout=60

    -- add a keyfile for emergency recovery
    sudo cryptsetup luksAddKey --key-file=/root/storage_keyfile /dev/sda4
        NOTE: use passphrase 'friday' for now

    -- manually open the encrypted partition for now so Samba can be tested
    sudo cryptsetup open --type luks --key-file=/root/storage_keyfile /dev/sda4 sda4_crypt

    -- create LVM and mount a logical volume
    sudo pvcreate /dev/mapper/sda4_crypt
    sudo vgcreate storage /dev/mapper/sda4_crypt
    sudo vgdisplay
    sudo lvcreate -L 5G -n testshare storage
    sudo lvdisplay
    sudo mkfs.ext4 /dev/mapper/storage-testshare

    -- mount the new test share and make it accessible to Samba
    sudo mkdir -p /srv/storage/testshare
    sudo chmod a+rwx /srv/storage
    sudo mount /dev/mapper/storage-testshare /srv/storage/testshare
    sudo chmod a+rwx /srv/storage/testshare
    sudo vi /etc/fstab
    -- modify:
        -- remove line for /dev/sda4, and add to end:
        /dev/mapper/storage-testshare /srv/storage/testshare ext4 defaults,nobootwait 0 2

    -- set up Samba with a test share:

    -- add the storage account for the volume manager for anonymous Samba access
    -- NOTE: observe the GID from addgroup and put it into adduser
    NOTE: record the GID, normally 128
    sudo addgroup --system storage
    sudo adduser --system --gid 128 --no-create-home storage

    sudo vi /etc/samba/smb.conf
    -- modify
        #workgroup = LITTLEDEVICES
        workgroup = VERIWAVE
        #wins support = yes
        #dns proxy = yes
        interfaces = 127.0.0.0/8 192.168.1.0/24 192.168.2.0/24 192.168.3.0/24 eth1.1 eth1.2 eth1.3
        bind interfaces only = yes
        ...
        security = user
        guest account = storage
        map to guest = bad user

        [testshare]
            comment = LittleDevices Test Share
            path = /srv/storage/testshare
            browsable = yes
            guest ok = yes
            read only = no
            writable = yes
            create mask = 0755
            directory mask = 0777
            public = yes
    NOTE: smb.conf file will be edited again for the final config below.

    sudo service smbd stop
    sudo service smbd start
    sudo service nmbd stop
    sudo service nmbd start

    Verify that Samba still works and exports a 5G testshare filesystem.
        smbclient -L localhost
    Reboot and verify that it continues to work.

9. Python stuff

    sudo apt-get -y install python-pip unzip python-dev python-docutils
    sudo pip install httplib2

10. ld-admin home directory

    Edit .bashrc:

        -- comment out PS1= stuff (2 places)
        -- add 'xtitle $HOSTNAME'
        -- add aliases:
            alias rm='rm -i'
            alias gitshow='git show --pretty="format:" --name-only $1'
            alias update='sudo apt-get -y update && sudo apt-get -y upgrade'
            alias title=xtitle
        -- set the cdpath
            CDPATH=".:..:~:~/src:~/src/ld:~/src/ld/littledev"

    Edit .vimrc:

        set tabstop=4 shiftwidth=4 softtabstop=4 expandtab
        set wrapscan wrapmargin=0 wrap linebreak textwidth=0 columns=96
        set backspace=indent,eol,start
        set autoindent nosmartindent cindent
        set ignorecase smartcase
        set hlsearch
        set noedcompatible nocompatible nocscopetag
        set exrc
        set tags=./tags,../tags,../../tags,../../../tags,~/tags
        set title

        inoremap # X^H#
        nnoremap ^] g^]

        syn on
        filetype plugin on
        filetype indent on

        let &titlestring = hostname() . ": " . expand("%m%t")
        auto BufEnter * :let &titlestring = hostname() . ": " . expand("%m%t")
        auto VimLeave * :set t_ts="LittleDevice4"

11. Install the LD source tree

    mkdir ~/src
    cd ~/src
    git clone https://talex1962@github.com/talex1962/ld.git
    cd ld
    git push -u origin master
    git config --global user.name "Tom"
    git config --global user.email talex1962@gmail.com
    cd littledev
    mkdir logs
    vi commsManager.py
    -- modify the IP addresses to match that of the switch, AP and VMs
    cd db
    vi LDDB.py LANDB.py
    -- modify the IP addresses and URLs to match that of the devices and VMs
    python LDDB.py
    python LANDB.py

12. Volume manager functions

    -- set up sudoers file
    sudo vi /etc/sudoers
        -- modify:
        User_Alias LDUSER = ld-admin

        Cmnd_Alias LVFUNCS_CMDS = /usr/local/bin/ld_lvfuncs.py
        Cmnd_Alias FSFUNCS_CMDS = /usr/local/bin/ld_fsfuncs.py
        Cmnd_Alias SMBFUNCS_CMDS = /usr/local/bin/ld_smbfuncs.py
        Cmnd_Alias LDFUNCS = LVFUNCS_CMDS,FSFUNCS_CMDS,SMBFUNCS_CMDS

        # Allow the Little Devices admin user to run specific commands
        LDUSER ALL=(ALL) NOPASSWD: LDFUNCS

    -- copy the various volume manager helper functions
    sudo cp ~/src/ld/littledev/devices/disk/funcs/*.py /usr/local/bin
    sudo chown root:root /usr/local/bin/*
    sudo chmod 0550 /usr/local/bin/*

    -- create the RAMdisk for helper function message passing
    mkdir /tmp/ram
    sudo chown root:root /tmp/ram
    sudo chmod a+rwx /tmp/ram

    sudo vi /etc/fstab
        -- modify to read similar to:
        # /etc/fstab: static file system information.
        # Use 'blkid' to print the UUID for a device
        #
        UUID=606e42c8-da72-4a95-b549-454c663473e6 /       ext4    errors=remount-ro 0       1
        UUID=a7e30ca2-ad0f-4518-b959-d001c292dd3c /boot   ext4    defaults        0       2
        UUID=7e79b85a-dbd2-41d3-b25e-0e09cda64a2e none    swap    sw              0       0
        # 20 MB RAMdisk using tmpfs on /tmp/ram for messaging storage
        none /tmp/ram tmpfs rw,auto,nodev,nosuid,noexec,noatime,size=20M 0 0
        #
        # The following comment MUST be present for the FS funcs to process this file
        # DYNAMIC VOLUMES
        /dev/mapper/storage-testshare /srv/storage/testshare ext4 defaults,nobootwait 0 2

    sudo mount -a
    sudo chmod a+rwx /tmp/ram

    -- set up the smb.conf file
    sudo vi /etc/samba/smb.conf
        -- modify to read as:
            # Little Device Samba config file
            [global]
                workgroup = VERIWAVE
                server string = %h server (Samba, Ubuntu)
                dns proxy = no
                interfaces = 127.0.0.0/8 192.168.1.0/24 192.168.2.0/24 192.168.3.0/24 eth1.1 eth1.2 eth1.3
                bind interfaces only = yes
                log file = /var/log/samba/log.%m
                max log size = 1000
                syslog = 0
                panic action = /usr/share/samba/panic-action %d
                server role = standalone server
                passdb backend = tdbsam
                obey pam restrictions = yes
                unix password sync = yes
                passwd program = /usr/bin/passwd %u
                passwd chat = *Enter\snew\s*\spassword:* %n\n *Retype\snew\s*\spassword:* %n\n *password\supdated\ssuccessfully* .
                pam password change = yes
                security = user
                guest account = storage
                map to guest = bad user
                usershare allow guests = yes
            #
            # The following comment MUST be present for the Samba funcs to process this file
            # DYNAMIC SHARES
            [testshare]
                comment = Test Volume
                path = /srv/storage/testshare
                browsable = yes
                guest ok = yes
                read only = no
                writable = yes
                create mask = 0755
                directory mask = 0777
            # ENDSHARE

    sudo service smbd stop
    sudo service smbd start
    sudo service nmbd stop
    sudo service nmbd start

    smbclient -L localhost

13. Install supervisord and get it set up

    sudo apt-get install supervisor

    sudo vi /etc/supervisor/conf.d/commsMgr.conf
        -- modify:
        [program:commsManager]
        command=python -u commsManager.py
        process_name=commsManager
        directory=/usr/local/lib/ld/littledev
        stdout_logfile=/tmp/ram/commsConsole.log
        stdout_logfile_backups=1
        stdout_logfile_maxbytes=500KB
        redirect_stderr=true
        autostart=true
        autorestart=true
        startretries=1000
        user=ld-admin

    sudo vi /etc/supervisor/conf.d/diskMgr.conf
        -- modify:
        [program:diskManager]
        command=python -u diskManager.py
        process_name=diskManager
        directory=/usr/local/lib/ld/littledev
        stdout_logfile=/tmp/ram/diskConsole.log
        stdout_logfile_backups=1
        stdout_logfile_maxbytes=500KB
        redirect_stderr=true
        autostart=true
        autorestart=true
        startretries=1000
        user=ld-admin

    sudo vi /etc/supervisor/conf.d/LANMgr.conf
        -- modify:
        [program:LANManager]
        command=python -u LANManager.py
        process_name=LANManager
        directory=/usr/local/lib/ld/littledev
        stdout_logfile=/tmp/ram/LANConsole.log
        stdout_logfile_backups=1
        stdout_logfile_maxbytes=500KB
        redirect_stderr=true
        autostart=true
        autorestart=true
        startretries=1000
        user=ld-admin

    NOTE: don't start the daemons yet.

14. Move the Python functions to /usr/local and start them with supervisor;
    also ensure that the JSON DB files exist and are placed in /var/lib/ld/db
    NOTE: this needs /tmp/ram to exist and hold a RAMdisk

    cd /home/ld-admin/src/ld/littledev/db

    -- generate JSON DBs
    -- edit LDDB.py, LANDB.py, diskDB.py and ensure DBs set to CREATE mode
    python LDDB.py
    python LANDB.py
    python diskDB.py

    -- copy over the various files to their various locations
    sudo mkdir /usr/local/lib/ld
    sudo cp -r /home/ld-admin/src/ld/libs /usr/local/lib/ld
    sudo cp -r /home/ld-admin/src/ld/littledev /usr/local/lib/ld
    sudo mkdir -p /var/lib/ld/db
    sudo chown ld-admin:ld-admin /var/lib/ld /var/lib/ld/db
    sudo cp /usr/local/lib/ld/littledev/db/*.json /var/lib/ld/db
    sudo chown ld-admin:ld-admin /var/lib/ld/db/*.json
    sudo rm -f /usr/local/lib/ld/littledev/LDConfig.ini
    sudo cp /home/ld-admin/src/ld/littledev/LDConfig.ini /usr/local/etc

    -- edit LDConfig.ini in /usr/local/etc and adapt to new LD + system dirs
    sudo vi /usr/local/etc/LDConfig.ini
        -- modify:
        fileLogLevel = INFO
        consoleLogLevel = WARNING
        LDDBFile = /var/lib/ld/db/LDDB.json
        LANConfigDBFile = /var/lib/ld/db/LANConfigDB.json
        LANStatusDBFile = /var/lib/ld/db/LANStatusDB.json
        diskConfigDBFile = /var/lib/ld/db/diskConfigDB.json
        diskStatusDBFile = /var/lib/ld/db/diskStatusDB.json
        [COMMSMGR]
        logFile = /var/log/commsManager.log
        GUID = 0123456789
        [LANMGR]
        logFile = /var/log/LANManager.log
        [DISKMGR]
        logFile = /var/log/diskManager.log
        [DEVICE0]
        IPAddr = 192.168.1.72
        [DEVICE1]
        IPAddr = 192.168.1.71

    -- now start off the various manager daemons
    sudo supervisorctl
        supervisor> reread
        supervisor> update
        supervisor> status
        supervisor> exit

15. Final cleanup

    sudo apt-get -y update && sudo apt-get -y upgrade && sudo apt-get -y dist-upgrade
    sudo reboot

16. Log in and verify that the daemons are running

    NOTE: to stop the daemons:
        sudo supervisorctl
            supervisor> stop <daemon: commsManager, LANManager, diskManager>
                - or -
            supervisor> stop all

