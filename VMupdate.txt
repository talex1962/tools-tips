UPDATING A BACKEND VM
---------------------

1. Update new utilities if any (all VMs)

    NOTE: the following are already installed:

    via apt: xtitle vim exuberant-ctags git tcpdump python-pip unzip python-dev python-docutils
    supervisor python-imaging python-pythonmagick python-markdown python-textile python-django
    apache2 apache2-data apache2-mpm-prefork apache2-utils libapache2-mod-wsgi
    libmysqlclient-dev libexpat1 ssl-cert sqlite3 sqlite3-doc
    
    via pip: django MySQL-python httplib2 SQLAlchemy web.py pyparsing

2. Update LD source tree (all VMs)

    cd /home/ubuntu/src/ld
    git pull origin
        -- Git password is 'friday44'

3. For regserver:

    -- stop the daemon
    sudo supervisorctl
        supervisor> stop all
        supervisor> status
        supervisor> exit

    -- generate JSON DB
    -- NOTE: FIRST edit regTable.py to ensure that settings are correct
    cd /home/ubuntu/src/ld/regserver/server/db
    vi regTable.py
        -- modify:
            -- entryDict for each registering Little Device
            -- write entryDict into JSON DB for each device
    python regTable.py
    -- now revert the DB-maker to prevent unnecessary Git updates
    git checkout -- regTable.py

    -- copy over the various regserver files to their various locations
    sudo cp -r /home/ubuntu/src/ld/libs /usr/local/lib/ld
    sudo cp -r /home/ubuntu/src/ld/regserver /usr/local/lib/ld
    sudo chown -R ubuntu:ubuntu /var/lib/ld /var/lib/ld/db
    sudo cp /home/ubuntu/src/ld/regserver/server/db/regDB.json /var/lib/ld/db
    sudo chown -R ubuntu:ubuntu /var/lib/ld/db/*

    -- edit regServer.py in /usr/local, adapt to run on VM:
    sudo vi /usr/local/lib/ld/regserver/server/regserver.py
        -- modify:
        regDBFile = '/var/lib/ld/db/regDB.db'
        LOG_LEVEL = 'INFO'
        LOG_FILE = '/var/log/regserver.log'

        configureLogging(logfile=LOG_FILE, fileLevel=LOG_LEVEL, consoleLevel='WARNING')

    -- start off the regserver daemon
    sudo supervisorctl
        supervisor> reread
        supervisor> update
        supervisor> start all
        supervisor> status
        supervisor> exit

4. For mgmtserver:

    -- stop the daemon
    sudo supervisorctl
        supervisor> stop all
        supervisor> status
        supervisor> exit

    -- verify SoftEther VPN server is working OK
    sudo /usr/local/vpnserver/vpncmd /TOOLS /CMD check
    sudo /usr/local/vpnserver/vpncmd localhost:443 /SERVER /PASSWORD:Friday2014 /CMD ServerStatusGet

    -- copy over the various mgmtserver files to their various locations
    sudo mkdir -p /usr/local/lib/ld
    sudo mkdir -p /var/lib/ld/db
    sudo cp -r /home/ubuntu/src/ld/libs /usr/local/lib/ld
    sudo cp -r /home/ubuntu/src/ld/mgmtserver /usr/local/lib/ld

    -- copy over the master configuration file and edit to match site needs:
    sudo rm -f /usr/local/lib/ld/mgmtserver/server/mgmtConfig.ini

    sudo vi /usr/local/etc/mgmtConfig.ini
        -- modify as follows (leave rest unchanged):
        [DEFAULT]
        DBPath = /var/lib/ld/db
        logPath = /var/log

        [MAIN]
        fileLogLevel = INFO
        consoleLogLevel = WARNING
        defaultSites = yes

        [MGMTSERVER]
        VPNPassword = Friday2014
        VPNServerURL = 54.68.105.194:443

        [SITE0]
        GUID = 9876543210
        name = Marthas Cakes

        [DEVICE0]
        type = switch
        IPAddr = 192.168.1.64

        [DEVICE1]
        type = AP
        IPAddr = 192.168.1.63

        [DEVICE2]
        type = disk
        size = 20.0
    NOTE: if /usr/local/etc/mgmtConfig.ini does not exist, then do:
        sudo cp /home/ubuntu/src/ld/mgmtserver/server/mgmtConfig.ini /usr/local/etc
    and proceed with editing as usual.

    -- recreate the logDB database
    cd /home/ubuntu/src/ld/mgmtserver/server/db
    python devLog.py
    sudo cp /home/ubuntu/src/ld/mgmtserver/server/db/logDB.json /var/lib/ld/db

    -- regenerate sqlite3 DB
    cd /usr/local/lib/ld/mgmtserver/server/db
    python makeMainDB.py
    sudo chown -R ubuntu:ubuntu /var/lib/ld

    -- reconfigure VPN server
    cd /usr/local/lib/ld/libs/vpn/funcs
    sudo /usr/local/vpnserver/vpncmd localhost:443 /SERVER /PASSWORD:Friday2014 /IN:serversetup.bat
    sudo /usr/local/vpnserver/vpncmd localhost:443 /SERVER /PASSWORD:Friday2014 /CMD HubList

    -- copy VPN manager helper functions
    sudo cp /usr/local/lib/ld/libs/vpn/funcs/ld_vpnfuncs.py /usr/local/bin
    sudo chown root:root /usr/local/bin/*
    sudo chmod 0550 /usr/local/bin/*

    -- restart the manager daemon
    sudo supervisorctl
        supervisor> reread
        supervisor> update
        supervisor> start all
        supervisor> status
        supervisor> exit

    -- add the new management server (and LD) to the regserver DB if required
    -- ssh to regserver, then:
    cd /home/ubuntu/src/ld/regserver/server/db
    vi regTable.py
    -- modify:
        entryDict = { "deviceName": "Marthas Shop",
                      "authParams": { 'username': 'vcio', 'password': 'whatever' },
                      "mgmtServerURL": "http://54.68.105.194:8080" }
        dw.addOrUpdateRegEntry(GUID='9876543210', entryDict=entryDict)
        print "Created registration DB entry for 'Marthas Shop' GUID '9876543210'"

10. For vcioserver:

    -- stop the daemon
    sudo supervisorctl
        supervisor> stop all
        supervisor> status
        supervisor> exit

    -- update Django environment
    cd /home/ubuntu/src/ld/vcioserver/site
    python manage.py syncdb
    python manage.py collectstatic

    -- verify settings.py is all good
    vi /home/ubuntu/src/ld/vcioserver/site/apps/settings.py
        -- review and ensure nothing is out of place
        -- make sure logging goes to the right place

    -- add MYIPADDR to .bashrc
    # set environment variable to indicate IP address of this host, for Django
    MYIPADDR="54.68.66.127"
    export MYIPADDR

    -- restart the manager daemon
    sudo supervisorctl
        supervisor> reread
        supervisor> update
        supervisor> start all
        supervisor> status
        supervisor> exit
